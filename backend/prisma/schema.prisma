datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ====================
// User & Profile
// ====================
model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  password            String?   // Nullable for Google users
  name                String?
  googleId            String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Profile
  age                 String?
  nationality         String?
  currentCountry      String?
  phone               String?
  currentEducation    String?
  gpa                 String?
  fieldOfStudy        String?
  institution         String?
  academicAchievements String?
  englishLevel        String?
  englishTests        String?
  studyLevel          String?
  startDate           String?
  budget              String?
  workExperience      String?
  researchExperience  String?
  extracurricular     String?
  careerGoals         String?

  // Relations
  applications        Application[]
  targetCountries     UserTargetCountry[]
  targetPrograms      UserTargetProgram[]
}

// ====================
// Country
// ====================
model Country {
  id           String         @id @default(uuid())
  name         String
  visaInfo     String
  universities University[]
  applications Application[]
  userTargets  UserTargetCountry[]
}

// ====================
// University
// ====================
model University {
  id           String         @id @default(uuid())
  name         String
  countryId    String
  country      Country        @relation(fields: [countryId], references: [id])
  programs     Program[]
  applications Application[]
}

// ====================
// Program
// ====================
model Program {
  id            String              @id @default(uuid())
  name          String
  universityId  String
  university    University          @relation(fields: [universityId], references: [id])
  admissionSteps String             // JSON array of steps
  visaSteps      String             // JSON array of steps
  applications   Application[]
  requirements   ProgramRequirement? // One-to-one (can extend to one-to-many if needed)
  userTargets    UserTargetProgram[]
}

// ====================
// Program Requirements
// ====================
model ProgramRequirement {
  id             String   @id @default(uuid())
  programId      String   @unique
  minGpa         Float?
  requiredEnglishLevel String?   // e.g. "B2", "C1"
  requiredEnglishTest  String?   // e.g. "IELTS", "TOEFL"
  minEnglishScore Float?
  requiredStudyLevel   String?   // e.g. "Bachelor", "Master"
  requiredFieldOfStudy String?   // e.g. "Computer Science", "Engineering"
  additionalNotes      String?

  program Program @relation(fields: [programId], references: [id])
}

// ====================
// Application
// ====================
model Application {
  id            String   @id @default(uuid())
  userId        String
  countryId     String
  universityId  String
  programId     String
  status        String   @default("in_progress")
  currentPhase  Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  country     Country     @relation(fields: [countryId], references: [id])
  university  University  @relation(fields: [universityId], references: [id])
  program     Program     @relation(fields: [programId], references: [id])
  steps       StepProgress[]
}

// ====================
// Step Progress
// ====================
model StepProgress {
  id             String   @id @default(uuid())
  applicationId  String
  stepTitle      String
  completed      Boolean  @default(false)
  phase          Int      // 1 = admission, 2 = visa

  application Application @relation(fields: [applicationId], references: [id])
}

// ====================
// User Preferences (Normalized)
// ====================
model UserTargetCountry {
  id        String  @id @default(uuid())
  userId    String
  countryId String

  user     User    @relation(fields: [userId], references: [id])
  country  Country @relation(fields: [countryId], references: [id])
}

model UserTargetProgram {
  id        String  @id @default(uuid())
  userId    String
  programId String

  user     User    @relation(fields: [userId], references: [id])
  program  Program @relation(fields: [programId], references: [id])
}
